//Token definitions for Grammar Lexer
lower [a-z]
upper [A-Z]
letter [a-zA-Z]
digit [0-9]
%%
//Or y : como operadores para entender una Gramática
:
'|'
//Todos los terminales (se ponen todos los casos para que coincidan los nombres con los tokens definidos en el lenguaje)
int
short
long
char
float
double
byte
bool
void
//modificadores de tipos de datos
unsigned
//estructuras de control
if
else
switch
case
default
for
do
while
break
continue
foreach
repeat
times
//modificadores de clases, métodos y atributos
static
abstract
final
const
property
//modificadores de acceso
public
protected
private
//otras palabras reservadas
struct
class
//palabras reservadas para subset
in
where
select
map
scatter
gather
device
host
dim3
true
false
//operadores
\"
;
\(
\)
\[
\]
\{
\}
'.'
->
'*'
&
^
'/'
%
'+'
-
<<
>>
//Or cambia porque es operador en este contexto
\\'|'
\\:
,
!
~
=
@
//operador para mapping
=>
relOp
logOp
assignOp
prefixOp
postfixOp
//Ya que se manejan prioridades, id va abajo
id
type_id
//datos
int_value
long_value
short_value
double_value
float_value
long_double_value
char_value
string_value
//Tokens para No terminales
NonTerminal {upper}({letter}|{digit}|_)*
attribute @(_|{lower})({letter}|{digit}|_)*
attributeWithValue @(_|{lower})({letter}|{digit}|_)*:({digit})+
