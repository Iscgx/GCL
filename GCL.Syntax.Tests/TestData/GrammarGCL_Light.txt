#block #priority:0 S :
	 MainBlocks
:

MainBlocks :
	  MainBlock MainBlocks
	| MainBlock
:

MainBlock :
	  Lowlevel 
	| StructDeclaration 
	| FunctionDeclaration 
	| VarDeclaration 
	| Device { DeviceBlock } 
	| Host { HostBlock } 
:

Lowlevel :
	lowlevel
:

Device : 
	\@ device 
:

Host : 
	 \@ host 
:

#block #priority:1 DeviceBlock :
	  DeviceFunction DeviceBlock 
	| VarDeclaration DeviceBlock 
	| Lowlevel DeviceBlock 
	| StructDeclaration DeviceBlock 
	| DeviceFunction 
	| VarDeclaration 
	| Lowlevel 
	| StructDeclaration 
:

DeviceFunction :
	  AccessModifier FunctionDeclaration 
	| AccessModifier DeviceFunctionDeclaration 
	| FunctionDeclaration 
	| DeviceFunctionDeclaration 
:

AccessModifier : 
	  public 
	| private 
:

DeviceFunctionDeclaration :
	 DeviceFunctionID { Block }
:

DeviceFunctionID :
	Pattern id ( ArrayReference , ArrayReference )
:

ArrayReference : 
	 Type [ ArrayContent ] id
:

ArrayContent : 
	  * , ArrayContent
	| * 
:

Pattern : 
	  map 
	| scatter 
	| gather
:

#block #priority:1 HostBlock : 
	  StructDeclaration HostBlock 
	| FunctionDeclaration HostBlock 
	| VarDeclaration HostBlock 
	| Lowlevel HostBlock 
	| StructDeclaration 
	| FunctionDeclaration 
	| VarDeclaration 
	| Lowlevel 
:

StructDeclaration : 
	 StructID VarDeclarations } ; 
:

StructID :
	struct type_id {
:
				
FunctionDeclaration : 
	 FunctionSymbol { Block } 
:

FunctionSymbol : 
	  FunctionID FunctionBody 
:

FunctionID : 
	 Type id
:

FunctionBody : 
	  ( ParamsList ) 
	| ( ) 
:
				
ParamsList : 
	Type id , ParamsList 
	| Type id
	| ArrayReference , ParamsList
	| ArrayReference
:

#block #priority:2 Block : 
	  Statement Block 
	| Lowlevel Block 
	| Statement 
	| Lowlevel 
:
					
Statement : 
	  SimpleStatement 
	| ComplexStatement 
	| break ; 
	| continue ; 
:
				
SimpleStatement : 
	  VarDeclaration 
	| StructDeclaration 
	| NewScopeBlock Block } 
	| Expr ; 
	| return Expr ;
	| id = \@ id ;
:

NewScopeBlock : { 
:
						
ComplexStatement : 
	  LoopStatement 
	| ConditionalStatement 
:

LoopStatement :
	LoopStatementBody SimpleStatement
	| DoWhile SimpleStatement while ( Expr ) ; 
:

DoWhile :
	do
:
					
LoopStatementBody : 
	  for ( VarDeclaration Expr ; Expr )
	| for ( Expr ; Expr ; Expr )
	| while ( Expr )
:

ConditionalStatement : //PENDIENTE	
	  IfBody SimpleStatement 
	| IfBody SimpleStatement ElseBody SimpleStatement 
	| switch ( Expr ) { SwitchBody } 
:

IfBody :
	if ( Expr )
:

ElseBody :
	else
:
					
SwitchBody : //PENDIENTE	
	  case Expr \: Block SwitchBody 
	| default \: Block 
	| case Expr \: Block 
:
					
VarDeclarations : 
	  Type id ; VarDeclarations
				\} 
	| Type id ; 
:

VarDeclaration : 
	  Type id = Expr ; 
 
	| Type id ; 
 
	| const Type id = Expr ;
	| const Type id ; 
 
	| ArrayDeclaration ;
:

ArrayDeclaration :
	Type id [ ArrayDimension 
:

ArrayDimension :	
	  E1 , ArrayDimension 
	| E1 ]
:

Type : 
	  FinalType 
 
	| \@ FinalType 
:

FinalType: 
	  type_id 
	| char 
	| float 
	| bool 
	| double 
	| long double 
	| unsigned IntType 
	| void 
	| IntType 
	| string 
:
					
IntType : 
	  int 
	| short 
	| short int 
	| long
	| long int 
:

Expr : 
	E1
	| Subset 
:

E1 : 
	E1 = E2
		
	| E2
 
:
 
E2 : 
	E2 assignOp E3
	| E3
 
:

E3 : 
	E3 logOp E4
	| E4
 
:

E4 : 
	E4 relOp E5
	| E5
 
:

E5 : 
	E5 \| E6
	| E5 & E6
	| E6
 
:

E6 : 
	E6 << E7
	| E6 >> E7
	| E7 
 
:

E7 : 
	E7 + E8
	| E7 - E8
	| E8

 
:

E8 : 
	E8 % E9
	| E8 / E9
	| E8 * E9
	| E8 ^ E9
	| E9
 
:

E9 : 
	( Type ) E10 
	| prePostfixOp E10
	| E10 prePostfixOp
	| ! E10
	| & E10
	| E10 
 
:

E10 : 
	( Expr ) 
 
	| ExprFinal 
 
:
							
FunctionCall : 
	id ( ValueList ) 
	| id ( ) 
:
								
ValueList : 
	Expr , ValueList 
	| Expr
:

DeviceFunctionCall : //PENDIENTE	
	id DeviceBT ( ValueList ) 
	| id DeviceBT ( ) 
:

DeviceBT : //PENDIENTE	
	[ Dim3 , Dim3 ]
:

Dim3 : //PENDIENTE
	Expr 
	| dim3 ( Expr ) 
	| dim3 ( Expr , Expr ) 
				\} 
	| dim3 ( Expr , Expr , Expr )
:
							
ExprFinal : 
	Value 
 
	| FunctionCall 
	| DeviceFunctionCall //PENDIENTE
	| \@ id
	| id 
	| id [ ArrayDimension
	| StructInstance 
 
	| true 
 
	| false 
 
:

StructFields :
	id . StructFields
	| id
:

StructInstance : 
	id . StructFields
:

PreSubset :
	Type id in id where+
:
				
Subset : //PENDIENTE	
	PreSubset Expr select Expr
	| PreSubset Expr
:
							
Value : 
	int_value 
 
	| long_value 
 
	| short_value 
 
	| double_value 
 
	| float_value 
 
	| long_double_value 
 
	| char_value 
 
	| string_value 
 
: